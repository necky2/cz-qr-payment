import*as cdigit from"cdigit";import QRCode from"qrcode-svg";class QRPayment{static parse={amount:t=>{if(0<parseFloat(t).toFixed(2))return String(parseFloat(t).toFixed(2));throw Error("Invalid amount: "+t)},prefix:t=>{if(t=t?String(t):"",/^\d{0,6}$/.test(t))return t.padStart(6,"0");throw Error(`Invalid prefix: '${t}'`)},number:t=>{if(/^\d{2,10}$/.test(String(t)))return String(t).padStart(10,"0");throw Error(`Invalid account number: '${t}'`)},bankCode:t=>{if(t&&/^\d{3,4}$/.test(String(t)))return String(t).padStart(4,"0");throw Error("Invalid bank code: "+t)},bankAccountString:t=>{var e;if(t&&/^(\d{1,6}-)?(\d{2,10})\/\d{3,4}$/.test(String(t)))return{prefix:(e=Array.from(t.matchAll(/^((\d{1,6})-)?(\d{2,10})\/(\d{3,4})$/g))[0])[2],number:e[3],bankCode:e[4]};throw Error("Invalid bank account: "+t)},message:t=>(t=t?String(t):"",/^[^*]{0,60}$/.test(t)?t:null),DT:t=>{var e,n;return t instanceof Date?(e=("0"+t.getDate()).slice(-2),n=("0"+(t.getMonth()+1)).slice(-2),""+t.getFullYear()+e+n):(t=t?String(t):"",/^\d{8}|^$/.test(t)?t:null)},symbols:t=>(t=t?String(t):"",/^\d{0,10}$/.test(t)?t:t.substring(0,9)),VS:t=>QRPayment.parse.symbols(t),SS:t=>QRPayment.parse.symbols(t),KS:t=>QRPayment.parse.symbols(t),URL:t=>(t=t?String(t):"",/^[^*]{0,140}$/.test(t)?t:t.substring(0,139))};options={message:"",padding:4,width:256,height:256,color:"#000000",background:"#ffffff",DT:"",VS:"",SS:"",KS:"",URL:""};constructor(t,e,n,r,s={}){this.amount=QRPayment.parse.amount(t),this.prefix=QRPayment.parse.prefix(e),this.number=QRPayment.parse.number(n),this.bankCode=QRPayment.parse.bankCode(r),this.country="CZ",this.options={...this.options,...s}}static fromBankAccountString(t,e,n={}){e=QRPayment.parse.bankAccountString(e);return new this(t,e.prefix,e.number,e.bankCode,n)}convertLetters=t=>{if(t.length<1)throw Error("Invalid value of string");const e={A:10,B:11,C:12,D:13,E:14,F:15,G:16,H:17,I:18,J:19,K:20,L:21,M:22,N:23,O:24,P:25,Q:26,R:27,S:28,T:29,U:30,V:31,W:32,X:33,Y:34,Z:35};return[...t].map(t=>String(e[t])).join("")};calculateCheckDigits=t=>cdigit.mod97_10.compute(t);getIban=()=>{const t=this.calculateCheckDigits([this.bankCode,this.prefix,this.number,this.convertLetters(this.country)].join(""));return[this.country,t,this.bankCode,this.prefix,this.number].join("")};generateContent=()=>{const e={ACC:this.getIban(),AM:this.amount,CC:"CZK",...QRPayment.parse.message(this.options.message)&&{MSG:QRPayment.parse.message(this.options.message)},...QRPayment.parse.VS(this.options.VS)&&{"X-VS":QRPayment.parse.VS(this.options.VS)},...QRPayment.parse.SS(this.options.SS)&&{"X-SS":QRPayment.parse.SS(this.options.SS)},...QRPayment.parse.KS(this.options.KS)&&{"X-KS":QRPayment.parse.KS(this.options.KS)},...QRPayment.parse.URL(this.options.URL)&&{"X-URL":QRPayment.parse.URL(this.options.URL)},...QRPayment.parse.DT(this.options.DT)&&{DT:QRPayment.parse.DT(this.options.DT)}};return"SPD*1.0*"+Object.keys(e).map(t=>[t,e[t]].join(":")).join("*")};getQR(){return new QRCode({content:this.generateContent(),padding:this.options.padding,width:this.options.width,height:this.options.height,color:this.options.color,background:this.options.background,ecl:"M"})}render(){return this.getQR().svg()}}export{QRPayment};
